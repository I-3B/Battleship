{"version":3,"sources":["component/CellDom.js","component/BoardDom.js","factories/GameBoard.js","factories/Player.js","factories/AttacksHandler.js","factories/Ship.js","factories/ShipPlacer.js","component/GameDom.js","App.js","reportWebVitals.js","index.js"],"names":["CellDom","props","id","className","Board","useState","cells","setCells","useEffect","arr","i","GAME_BOARD_SIZE","j","push","player","user","onMouseUp","event","gameStarted","boardClickedAt","target","GameBoard","size","board","Array","from","length","usedBy","hit","available","ships","checkCell","y","x","canPlaceShipAt","shipDirection","shipLength","Error","place","yStart","xStart","ship","getLength","receiveAttack","cell","checkLose","res","forEach","e","isSunk","getBoard","Player","boardSize","enemy","setEnemy","otherPlayer","AIAttack","Math","floor","random","msg","AttacksHandler","p1","p2","changeColor","state","setAttribute","document","querySelector","humanAttacked","Number","Ship","ShipSize","hits","getHits","ShipPlacer","shipsLength","finished","s","initialColor","usedColor","rotate","lastRotate","itr","eventsHandler","type","start","color","style","backgroundColor","removeColor","placeShip","removeEventListener","addEventListener","key","round","shipsLengthForEachPlayer","Game","message","setMessage","messageOpacity","setMessageOpacity","player1","setPlayer1","player2","setPlayer2","gameActive","setGameActive","attacksHandler","turnToggle","setTurnToggle","initPlayer","p","Object","assign","shipPlacerFinished","changeMessage","setTimeout","isGameOverFor","winnerIs","gameOver","location","reload","cellClickedAtCallback","includes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2718d388.chunk.js","sourcesContent":["import '../style/CellDom.css';\r\nconst CellDom = (props) => {\r\n    return <div id={props.id} className=\"cell\"></div>;\r\n};\r\nexport default CellDom;\r\n","import { useEffect, useState } from 'react';\r\nimport { GAME_BOARD_SIZE } from '../App';\r\nimport '../style/BoardDom.css';\r\nimport CellDom from './CellDom';\r\n\r\nconst Board = (props) => {\r\n    const [cells, setCells] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let arr = [];\r\n        for (let i = 0; i < GAME_BOARD_SIZE; i++)\r\n            for (let j = 0; j < GAME_BOARD_SIZE; j++)\r\n                arr.push(\r\n                    <CellDom\r\n                        key={props.player.user + i + '' + j}\r\n                        id={props.player.user + i + '' + j}\r\n                    ></CellDom>\r\n                );\r\n        setCells(arr);\r\n    }, []);\r\n    return (\r\n        <div\r\n            id={props.player.user}\r\n            className=\"board\"\r\n            onMouseUp={(event) => {\r\n                if (props.gameStarted) props.boardClickedAt(event.target);\r\n            }}\r\n        >\r\n            {cells}\r\n        </div>\r\n    );\r\n};\r\nexport default Board;\r\n","import { GAME_BOARD_SIZE } from '../App';\r\n\r\nconst GameBoard = (size) => {\r\n    const board = Array.from(Array(size), () => new Array(size));\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board[i].length; j++) {\r\n            board[i][j] = { usedBy: null, hit: false, available: true };\r\n        }\r\n    }\r\n    let ships = [];\r\n    const checkLose = () => {\r\n        let res = true;\r\n        ships.forEach((e) => {\r\n            if (!e.isSunk()) res = false;\r\n        });\r\n        return res;\r\n    };\r\n    const canPlaceShipAt = (y, x, shipDirection, shipLength) => {\r\n        if (shipDirection === 'x') {\r\n            for (let i = x; i < shipLength + x; i++) {\r\n                if (!board[y]) return false;\r\n                else if (!board[y][i] || !board[y][i].available) return false;\r\n            }\r\n        } else if (shipDirection === 'y') {\r\n            for (let i = y; i < shipLength + y; i++) {\r\n                if (!board[i] || !board[i][x].available) return false;\r\n            }\r\n        } else throw new Error('wrong shipDirection argument');\r\n        return true;\r\n    };\r\n    const place = (yStart, xStart, shipDirection, ship) => {\r\n        ships.push(ship);\r\n        if (shipDirection === 'y') {\r\n            for (let i = yStart; i < yStart + ship.getLength(); i++) {\r\n                board[i][xStart].usedBy = ship;\r\n            }\r\n            for (let i = yStart - 1; i < yStart + ship.getLength() + 1; i++) {\r\n                if (board[i]) {\r\n                    if (board[i][xStart]) board[i][xStart].available = false;\r\n                    if (board[i][xStart - 1])\r\n                        board[i][xStart - 1].available = false;\r\n                    if (board[i][xStart + 1])\r\n                        board[i][xStart + 1].available = false;\r\n                }\r\n            }\r\n        } else if (shipDirection === 'x') {\r\n            for (let i = xStart; i < xStart + ship.getLength(); i++) {\r\n                board[yStart][i].usedBy = ship;\r\n            }\r\n            for (let i = xStart - 1; i < xStart + ship.getLength() + 1; i++) {\r\n                if (board[yStart])\r\n                    if (board[yStart][i]) board[yStart][i].available = false;\r\n                if (board[yStart - 1])\r\n                    if (board[yStart - 1][i])\r\n                        board[yStart - 1][i].available = false;\r\n                if (board[yStart + 1])\r\n                    if (board[yStart + 1][i])\r\n                        board[yStart + 1][i].available = false;\r\n            }\r\n        }\r\n    };\r\n    const receiveAttack = (y, x) => {\r\n        let cell = board[y][x];\r\n        cell.hit = true;\r\n        if (cell.usedBy !== null) {\r\n            cell.usedBy.hit();\r\n        }\r\n        return true;\r\n    };\r\n    const checkCell = (y, x) => {\r\n        if (!board[y][x].hit) {\r\n            if (board[y][x].usedBy === null) return 'empty';\r\n            else return 'ship';\r\n        } else return 'attacked';\r\n    };\r\n    return {\r\n        checkCell,\r\n        canPlaceShipAt,\r\n        place,\r\n        receiveAttack,\r\n        checkLose,\r\n        getBoard: () => board,\r\n    };\r\n};\r\nexport default GameBoard;\r\n","import GameBoard from './GameBoard';\r\n\r\nconst Player = (boardSize, user) => {\r\n    let enemy = null;\r\n\r\n    const board = GameBoard(boardSize);\r\n    const setEnemy = (otherPlayer) => {\r\n        enemy = otherPlayer;\r\n    };\r\n    const AIAttack = () => {\r\n        const [y, x] = [\r\n            Math.floor(Math.random() * boardSize),\r\n            Math.floor(Math.random() * boardSize),\r\n        ];\r\n        const msg = enemy.board.checkCell(y, x);\r\n        if (msg === 'empty' || msg === 'ship') enemy.board.receiveAttack(y, x);\r\n        else if (msg !== 'attacked') throw new Error(msg);\r\n        return [y, x, msg];\r\n    };\r\n    return {\r\n        user,\r\n        board,\r\n        setEnemy,\r\n        AIAttack,\r\n    };\r\n};\r\nexport default Player;\r\n","const AttacksHandler = (p1, p2) => {\r\n    const humanAttacked = (cell) => {\r\n        const [y, x] = [\r\n            Number(cell.id[cell.id.length - 2]),\r\n            Number(cell.id[cell.id.length - 1]),\r\n        ];\r\n        const board = p2.board;\r\n        const state = board.checkCell(y, x);\r\n        changeColor(cell, state);\r\n        if (state === 'ship' || state === 'empty') {\r\n            board.receiveAttack(y, x);\r\n        } else if (state === 'attacked') {\r\n        }\r\n        return state;\r\n    };\r\n    const changeColor = (cell, state) => {\r\n        if (state === 'ship')\r\n            cell.setAttribute('style', 'background-color:red');\r\n        else if (state === 'empty')\r\n            cell.setAttribute('style', 'background-color:wheat');\r\n    };\r\n    const AIAttack = () => {\r\n        let [y, x, state] = p2.AIAttack();\r\n        while (state === 'attacked') {\r\n            [y, x, state] = p2.AIAttack();\r\n        }\r\n        changeColor(document.querySelector('#' + p1.user + y + '' + x), state);\r\n        while (\r\n            (state === 'ship' || state === 'attacked') &&\r\n            !p1.board.checkLose()\r\n        ) {\r\n            [y, x, state] = p2.AIAttack();\r\n            changeColor(\r\n                document.querySelector('#' + p1.user + y + '' + x),\r\n                state\r\n            );\r\n        }\r\n    };\r\n    return {\r\n        AIAttack,\r\n        humanAttacked,\r\n    };\r\n};\r\nexport default AttacksHandler;\r\n","const Ship = (ShipSize) => {\r\n    const length = ShipSize;\r\n    let hits = 0;\r\n    return {\r\n        isSunk: () => {\r\n            return hits === length;\r\n        },\r\n        getLength: () => length,\r\n        hit: () => hits++,\r\n        getHits: () => hits,\r\n    };\r\n};\r\nexport default Ship;\r\n","import { GAME_BOARD_SIZE } from '../App';\r\nimport Ship from './Ship';\r\n\r\nconst ShipPlacer = (player, shipsLength, finished) => {\r\n    const ships = (() => {\r\n        let s = [];\r\n        for (let ship of shipsLength) {\r\n            s.push(Ship(ship));\r\n        }\r\n        return s;\r\n    })();\r\n\r\n    if (player.user === 'human') {\r\n        const initialColor = 'aliceblue';\r\n        const canBeUsedColor = 'yellowgreen';\r\n        const canNotBeUsedColor = 'orange';\r\n        const usedColor = 'green';\r\n        let rotate = false;\r\n        let lastRotate = false;\r\n        let itr = 0;\r\n        const changeColor = (start, shipLength) => {\r\n            lastRotate = rotate;\r\n            const shipDirection = rotate ? 'y' : 'x';\r\n            const [y, x] = [\r\n                Number(start.id[start.id.length - 2]),\r\n                Number(start.id[start.id.length - 1]),\r\n            ];\r\n            const canUse = player.board.canPlaceShipAt(\r\n                y,\r\n                x,\r\n                shipDirection,\r\n                shipLength\r\n            );\r\n            const color = canUse ? canBeUsedColor : canNotBeUsedColor;\r\n            if (shipDirection === 'x') {\r\n                for (let i = x; i < shipLength + x && i < GAME_BOARD_SIZE; i++)\r\n                    if (\r\n                        document.querySelector('#human' + y + '' + i).style\r\n                            .backgroundColor !== usedColor\r\n                    )\r\n                        document.querySelector(\r\n                            '#human' + y + '' + i\r\n                        ).style.backgroundColor = color;\r\n            } else if (shipDirection === 'y') {\r\n                for (let i = y; i < shipLength + y && i < GAME_BOARD_SIZE; i++)\r\n                    if (\r\n                        document.querySelector('#human' + i + '' + x).style\r\n                            .backgroundColor !== usedColor\r\n                    )\r\n                        document.querySelector(\r\n                            '#human' + i + '' + x\r\n                        ).style.backgroundColor = color;\r\n            }\r\n        };\r\n        const removeColor = (start, shipLength) => {\r\n            const shipDirection = lastRotate ? 'y' : 'x';\r\n            const [y, x] = [\r\n                Number(start.id[start.id.length - 2]),\r\n                Number(start.id[start.id.length - 1]),\r\n            ];\r\n\r\n            if (shipDirection === 'x') {\r\n                for (let i = x; i < shipLength + x && i < GAME_BOARD_SIZE; i++)\r\n                    if (\r\n                        document.querySelector('#human' + y + '' + i).style\r\n                            .backgroundColor !== usedColor\r\n                    )\r\n                        document.querySelector(\r\n                            '#human' + y + '' + i\r\n                        ).style.backgroundColor = initialColor;\r\n            } else if (shipDirection === 'y') {\r\n                for (let i = y; i < shipLength + y && i < GAME_BOARD_SIZE; i++)\r\n                    if (\r\n                        document.querySelector('#human' + i + '' + x).style\r\n                            .backgroundColor !== usedColor\r\n                    )\r\n                        document.querySelector(\r\n                            '#human' + i + '' + x\r\n                        ).style.backgroundColor = initialColor;\r\n            }\r\n        };\r\n        const placeShip = (start, ship) => {\r\n            const shipDirection = lastRotate ? 'y' : 'x';\r\n            const [y, x] = [\r\n                Number(start.id[start.id.length - 2]),\r\n                Number(start.id[start.id.length - 1]),\r\n            ];\r\n            const canUse = player.board.canPlaceShipAt(\r\n                y,\r\n                x,\r\n                shipDirection,\r\n                ship.getLength()\r\n            );\r\n            if (canUse) {\r\n                player.board.place(y, x, shipDirection, ship);\r\n                if (shipDirection === 'x') {\r\n                    for (\r\n                        let i = x;\r\n                        i < ship.getLength() + x && i < GAME_BOARD_SIZE;\r\n                        i++\r\n                    ) {\r\n                        document.querySelector(\r\n                            '#human' + y + '' + i\r\n                        ).style.backgroundColor = usedColor;\r\n                    }\r\n                } else if (shipDirection === 'y') {\r\n                    for (\r\n                        let i = y;\r\n                        i < ship.getLength() + y && i < GAME_BOARD_SIZE;\r\n                        i++\r\n                    )\r\n                        document.querySelector(\r\n                            '#human' + i + '' + x\r\n                        ).style.backgroundColor = usedColor;\r\n                }\r\n                itr++;\r\n            }\r\n        };\r\n        const rotating = (e) => {\r\n            if (e.key === 'r' || e.key === 'R');\r\n            rotate = !rotate;\r\n        };\r\n        const board = document.querySelector('#human');\r\n        const eventsHandler = (event) => {\r\n            if (!ships[itr]) {\r\n                board.removeEventListener('mouseover', eventsHandler, true);\r\n                board.removeEventListener('mouseout', eventsHandler, true);\r\n                board.removeEventListener('mouseup', eventsHandler, true);\r\n                document.removeEventListener('keyup', eventsHandler, true);\r\n                finished();\r\n            } else\r\n                switch (event.type) {\r\n                    case 'mouseover':\r\n                        changeColor(event.target, ships[itr].getLength());\r\n                        break;\r\n                    case 'mouseout':\r\n                        removeColor(event.target, ships[itr].getLength());\r\n                        break;\r\n                    case 'mouseup':\r\n                        placeShip(event.target, ships[itr]);\r\n                        break;\r\n                    default:\r\n                }\r\n        };\r\n        document.addEventListener('keyup', rotating);\r\n        board.addEventListener('mouseover', eventsHandler, true);\r\n        board.addEventListener('mouseout', eventsHandler, true);\r\n        board.addEventListener('mouseup', eventsHandler, true);\r\n    } else if (player.user === 'AI') {\r\n        let itr = 0;\r\n        while (ships[itr]) {\r\n            let y, x;\r\n            let rotate;\r\n            let shipDirection;\r\n            do {\r\n                [y, x] = [\r\n                    Math.floor(Math.random() * GAME_BOARD_SIZE),\r\n                    Math.floor(Math.random() * GAME_BOARD_SIZE),\r\n                ];\r\n                rotate = Math.round(Math.random());\r\n                shipDirection = rotate ? 'x' : 'y';\r\n            } while (\r\n                !player.board.canPlaceShipAt(\r\n                    y,\r\n                    x,\r\n                    shipDirection,\r\n                    ships[itr].getLength()\r\n                )\r\n            );\r\n            player.board.place(y, x, shipDirection, ships[itr]);\r\n\r\n            itr++;\r\n        }\r\n    }\r\n};\r\nexport default ShipPlacer;\r\n","import BoardDom from './BoardDom';\r\nimport '../style/GameDom.css';\r\nimport { useEffect, useState } from 'react';\r\nimport Player from '../factories/Player';\r\nimport { GAME_BOARD_SIZE } from '../App';\r\nimport AttacksHandler from '../factories/AttacksHandler';\r\nimport ShipPlacer from '../factories/ShipPlacer';\r\nconst shipsLengthForEachPlayer = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\r\nconst Game = () => {\r\n    const [message, setMessage] = useState(\r\n        'Place your ships, press R to rotate ship'\r\n    );\r\n\r\n    const [messageOpacity, setMessageOpacity] = useState({\r\n        color: 'rgba(0, 0, 0, 1)',\r\n    });\r\n    const [player1, setPlayer1] = useState(\r\n        Player(GAME_BOARD_SIZE, 'human', true)\r\n    );\r\n    const [player2, setPlayer2] = useState(\r\n        Player(GAME_BOARD_SIZE, 'AI', false)\r\n    );\r\n    const [gameActive, setGameActive] = useState(false);\r\n    const attacksHandler = AttacksHandler(player1, player2);\r\n    const [turnToggle, setTurnToggle] = useState('human');\r\n    const initPlayer = (p, enemy) => {\r\n        const player = Object.assign({}, p);\r\n        player.setEnemy(enemy);\r\n        ShipPlacer(player, shipsLengthForEachPlayer, shipPlacerFinished);\r\n        return player;\r\n    };\r\n    const shipPlacerFinished = () => {\r\n        setGameActive(true);\r\n        changeMessage('Start attacking the enemy board.');\r\n    };\r\n    const changeMessage = (msg) => {\r\n        setMessageOpacity({ color: 'rgba(0, 0, 0, 0)' });\r\n        setTimeout(() => {\r\n            setMessage(msg);\r\n        }, 500);\r\n        setTimeout(() => {\r\n            setMessageOpacity({ color: 'rgba(0, 0, 0, 1)' });\r\n        }, 500);\r\n    };\r\n    const isGameOverFor = (player) => {\r\n        return player.board.checkLose();\r\n    };\r\n\r\n    const winnerIs = (player) => {\r\n        if (player.user === 'human') changeMessage(\"It's your win!!!\");\r\n        else changeMessage(\"It's the computer win :(\");\r\n    };\r\n    const gameOver = () => {\r\n        setTimeout(() => {\r\n            document.location.reload();\r\n        }, 5000);\r\n    };\r\n    const cellClickedAtCallback = (cell) => {\r\n        if (cell.id.includes('AI') && turnToggle === 'human') {\r\n            let result = attacksHandler.humanAttacked(cell);\r\n            if (result === 'empty') {\r\n                setTurnToggle(() => 'AI');\r\n            }\r\n        }\r\n        if (isGameOverFor(player2)) {\r\n            winnerIs(player1);\r\n            setGameActive(false);\r\n            gameOver();\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        setPlayer1(initPlayer(player1, player2));\r\n        setPlayer2(initPlayer(player2, player1));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (gameActive) {\r\n            if (turnToggle === 'AI') {\r\n                attacksHandler.AIAttack();\r\n                setTurnToggle(() => 'human');\r\n            } else if (turnToggle === 'human') {\r\n                changeMessage('Your turn');\r\n            }\r\n            if (isGameOverFor(player1)) {\r\n                winnerIs(player2);\r\n                setGameActive(false);\r\n\r\n                gameOver();\r\n            }\r\n        }\r\n    }, [turnToggle, gameActive]);\r\n    return (\r\n        <main id=\"game\">\r\n            <div id=\"message\" style={messageOpacity}>\r\n                {message}\r\n            </div>\r\n            <div id=\"boards-container\">\r\n                <BoardDom\r\n                    player={player1}\r\n                    enemy={player2.user}\r\n                    boardClickedAt={cellClickedAtCallback}\r\n                    gameStarted={gameActive}\r\n                ></BoardDom>\r\n                <BoardDom\r\n                    player={player2}\r\n                    enemy={player1.user}\r\n                    boardClickedAt={cellClickedAtCallback}\r\n                    gameStarted={gameActive}\r\n                ></BoardDom>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from './component/GameDom';\nexport const GAME_BOARD_SIZE = 10;\nconst App = () => {\n    return (\n        <div id=\"app\">\n            <Game></Game>\n        </div>\n    );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}